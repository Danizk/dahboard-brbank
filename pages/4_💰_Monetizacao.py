import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
# Importa fun√ß√µes do utils.py (necess√°rio ter utils.py na raiz do projeto)
from utils import format_currency, format_percentage, load_kpis, load_performance, convert_df_to_csv

# --- Paleta de Cores Azul Pastel para Vendedores ---
# (Certifique-se que os nomes A, B, C, D, E correspondem aos seus dados)
azul_pastel_palette = ['#E1F5FE', '#B3E5FC', '#81D4FA', '#4FC3F7', '#29B6F6'] # Do mais claro ao mais escuro
seller_color_map = {'A': azul_pastel_palette[0], 'B': azul_pastel_palette[1], 'C': azul_pastel_palette[2], 'D': azul_pastel_palette[3], 'E': azul_pastel_palette[4]}

# --- Inicializa√ß√£o do Estado da Sess√£o (Modo Executivo) ---
if 'exec_mode' not in st.session_state:
    st.session_state['exec_mode'] = False

# --- Carregar Dados Essenciais ---
df_kpis = load_kpis()
df_performance = load_performance()

# --- Conte√∫do da P√°gina ---
st.title("üí∞ Monetiza√ß√£o (Bottom of Funnel)")
st.markdown("Resultados financeiros e an√°lise da performance da equipe de vendas.")
st.markdown("---")

# Verifica se os dataframes foram carregados corretamente
if df_kpis is not None and df_performance is not None:
    st.subheader("Resultados Financeiros Chave")
    col1, col2, col3, col4 = st.columns(4)
    try:
        # Exibe KPIs financeiros com formata√ß√£o segura
        col1.metric("Receita Total", format_currency(df_kpis.loc['Receita Total (R$)', 'Valor']))
        col2.metric("Lucro L√≠quido", format_currency(df_kpis.loc['Lucro L√≠quido (R$)', 'Valor']))
        col3.metric("Ticket M√©dio por Cliente", format_currency(df_kpis.loc['Ticket M√©dio (R$)', 'Valor']))
        col4.metric("LTV (proxy)", format_currency(df_kpis.loc['LTV (R$)', 'Valor']))
    except KeyError as e:
        st.warning(f"M√©trica financeira n√£o encontrada: {e}. Verifique kpis_gerais.csv.")
    except Exception as e:
        st.error(f"Erro ao exibir KPIs financeiros: {e}")


    st.markdown("---")
    st.header("üèÜ Performance da Equipe de Vendas")

    try:
        # Cria c√≥pia para n√£o alterar o dataframe cacheado
        df_performance_processed = df_performance.copy()

        # --- Calcular e Adicionar Receita por Dia de Convers√£o ---
        receita_dia_col = 'Receita por Dia Conv (R$)'
        if 'Receita Total (R$)' in df_performance_processed.columns and 'Tempo Convers√£o (dias)' in df_performance_processed.columns:
            df_performance_processed[receita_dia_col] = df_performance_processed.apply(
                lambda row: row['Receita Total (R$)'] / row['Tempo Convers√£o (dias)']
                if pd.notna(row['Tempo Convers√£o (dias)']) and row['Tempo Convers√£o (dias)'] > 0 and pd.notna(row['Receita Total (R$)'])
                else pd.NA, # Usa pd.NA para valores indeterminados
                axis=1
            )
            # Calcula m√©dia ignorando erros/NAs
            media_receita_dia = pd.to_numeric(df_performance_processed[receita_dia_col], errors='coerce').mean()
            st.metric("Receita M√©dia por Dia de Convers√£o (Geral)", format_currency(media_receita_dia), help="M√©dia (Receita Total Vendedor / Tempo M√©dio Convers√£o Vendedor). Efici√™ncia da receita no tempo.")
        else:
            st.warning("Colunas 'Receita Total (R$)' ou 'Tempo Convers√£o (dias)' n√£o encontradas para calcular Receita por Dia.")
            receita_dia_col = None # Flag para n√£o formatar/usar depois

        # --- Tabela de Performance (Ocult√°vel no modo executivo) ---
        if not st.session_state.get('exec_mode', False):
            st.subheader("Tabela Detalhada de Performance")
            # Cria c√≥pia para formatar exibi√ß√£o sem alterar o df_performance_processed original
            df_display = df_performance_processed.set_index('Vendedor').copy()

            # Formata√ß√£o segura para exibi√ß√£o
            cols_to_format_currency = ['Ticket M√©dio (R$)', 'Receita Total (R$)', 'Receita por Lead (R$)', receita_dia_col]
            cols_to_format_currency = [col for col in cols_to_format_currency if col is not None and col in df_display.columns]
            for col in cols_to_format_currency:
                 df_display[col] = df_display[col].map(format_currency) # format_currency j√° retorna 'N/A' em caso de erro
            if 'Taxa Convers√£o (%)' in df_display.columns:
                  df_display['Taxa Convers√£o (%)'] = df_display['Taxa Convers√£o (%)'].map(format_percentage)
            if 'Tempo Convers√£o (dias)' in df_display.columns:
                # Formata apenas se for n√∫mero, sen√£o mant√©m como est√° (pode ser NA)
                df_display['Tempo Convers√£o (dias)'] = df_display['Tempo Convers√£o (dias)'].apply(lambda x: f"{x:.0f} dias" if pd.notna(x) else 'N/A')

            st.dataframe(df_display, use_container_width=True)

            # Bot√£o de Download (Usa df_performance_processed com n√∫meros)
            try:
                 csv_performance_download = convert_df_to_csv(df_performance_processed)
                 st.download_button(
                    label="Download Tabela de Performance", data=csv_performance_download,
                    file_name='performance_vendedores_detalhada.csv', mime='text/csv', key='download-performance'
                 )
            except Exception as e_download:
                 st.error(f"Erro ao preparar dados para download: {e_download}")

            st.markdown("---")
        # else: # Comentado para evitar mensagem desnecess√°ria quando tabela est√° oculta
             # st.info("Tabela detalhada oculta no Modo Executivo.")

        # --- Gr√°ficos de Performance (Ocult√°veis no modo executivo) ---
        if not st.session_state.get('exec_mode', False):
            st.subheader("An√°lise Gr√°fica Individual")
            # Garante que temos dados para plotar
            if not df_performance_processed.empty:
                col_vend1, col_vend2 = st.columns(2)
                with col_vend1:
                    # Gr√°fico de Receita (Cores Atualizadas)
                    if 'Receita Total (R$)' in df_performance_processed.columns:
                        fig_rev_vendedor = px.bar(df_performance_processed, x='Vendedor', y='Receita Total (R$)', color='Vendedor', title='Receita Total Gerada', text_auto='.2s', labels={'Receita Total (R$)':'Receita (R$)'},
                                                  color_discrete_map=seller_color_map) # << COR AZUL PASTEL APLICADA
                        fig_rev_vendedor.update_traces(textposition='outside')
                        fig_rev_vendedor.update_layout(showlegend=False, height=350)
                        st.plotly_chart(fig_rev_vendedor, use_container_width=True)

                    # Gr√°fico Leads Convertidos (Cores Atualizadas)
                    if 'Leads Convertidos' in df_performance_processed.columns:
                        fig_leads_conv_vendedor = px.bar(df_performance_processed, x='Vendedor', y='Leads Convertidos', color='Vendedor', title='Leads Convertidos', text_auto=True,
                                                         color_discrete_map=seller_color_map) # << COR AZUL PASTEL APLICADA
                        fig_leads_conv_vendedor.update_traces(textposition='outside')
                        fig_leads_conv_vendedor.update_layout(showlegend=False, height=350)
                        st.plotly_chart(fig_leads_conv_vendedor, use_container_width=True)

                with col_vend2:
                     # Gr√°fico Taxa Convers√£o (Cores Atualizadas)
                     if 'Taxa Convers√£o (%)' in df_performance_processed.columns:
                        y_range_max = df_performance_processed['Taxa Convers√£o (%)'].max() * 1.15 if pd.notna(df_performance_processed['Taxa Convers√£o (%)'].max()) else None
                        fig_tx_vendedor = px.bar(df_performance_processed, x='Vendedor', y='Taxa Convers√£o (%)', color='Vendedor', title='Taxa de Convers√£o', text_auto='.1f', range_y=[0, y_range_max],
                                                 color_discrete_map=seller_color_map) # << COR AZUL PASTEL APLICADA
                        fig_tx_vendedor.update_traces(texttemplate='%{text:.1f}%', textposition='outside')
                        fig_tx_vendedor.update_layout(showlegend=False, height=350)
                        st.plotly_chart(fig_tx_vendedor, use_container_width=True)

                     # Gr√°fico Tempo M√©dio Convers√£o (Cores Atualizadas)
                     if 'Tempo Convers√£o (dias)' in df_performance_processed.columns:
                        fig_tempo_vendedor = px.bar(df_performance_processed, x='Vendedor', y='Tempo Convers√£o (dias)', color='Vendedor', title='Tempo M√©dio de Convers√£o', text_auto='.0f',
                                                    color_discrete_map=seller_color_map) # << COR AZUL PASTEL APLICADA
                        fig_tempo_vendedor.update_traces(texttemplate='%{text:.0f}d', textposition='outside')
                        fig_tempo_vendedor.update_layout(showlegend=False, height=350)
                        st.plotly_chart(fig_tempo_vendedor, use_container_width=True)
            else:
                 st.warning("N√£o h√° dados de performance para exibir os gr√°ficos.")
        # else: # Comentado para evitar mensagem desnecess√°ria
        #      st.info("Gr√°ficos individuais ocultos no Modo Executivo.")

        st.markdown("---")
        # --- Ranking de Performance (Melhorado Visualmente) ---
        st.subheader("üìä Ranking de Performance da Equipe")

        # Fun√ß√£o auxiliar para obter dados do ranking com seguran√ßa
        def get_rank_data(df, col, id_func, format_func=None):
             # Verifica se a coluna existe e n√£o est√° toda NaN
             if col not in df.columns or df[col].isnull().all(): return "N/A", "N/A"
             # Aplica idxmin/idxmax nos n√£o-NaN e obt√©m o √≠ndice original
             valid_series = df[col].dropna()
             if valid_series.empty: return "N/A", "N/A"
             idx = id_func(valid_series)
             # Se idx for retornado e existir no DataFrame original...
             if pd.notna(idx) and idx in df.index:
                 val = df.loc[idx, col]
                 vend = df.loc[idx, 'Vendedor']
                 text = format_func(val) if format_func and pd.notna(val) else (str(int(val)) if pd.notna(val) else "N/A") # Formata ou converte pra string
                 return vend, text
             return "N/A", "N/A"


        # Obtem dados para o ranking (com tratamento de erro mais robusto)
        best_tx_vend, best_tx_val = get_rank_data(df_performance_processed, 'Taxa Convers√£o (%)', pd.Series.idxmax, format_percentage)
        worst_tx_vend, worst_tx_val = get_rank_data(df_performance_processed, 'Taxa Convers√£o (%)', pd.Series.idxmin, format_percentage)
        best_rec_vend, best_rec_val = get_rank_data(df_performance_processed, 'Receita Total (R$)', pd.Series.idxmax, format_currency)
        worst_rec_vend, worst_rec_val = get_rank_data(df_performance_processed, 'Receita Total (R$)', pd.Series.idxmin, format_currency)
        best_tk_vend, best_tk_val = get_rank_data(df_performance_processed, 'Ticket M√©dio (R$)', pd.Series.idxmax, format_currency)
        worst_tk_vend, worst_tk_val = get_rank_data(df_performance_processed, 'Ticket M√©dio (R$)', pd.Series.idxmin, format_currency)
        best_tm_vend, best_tm_val = get_rank_data(df_performance_processed, 'Tempo Convers√£o (dias)', pd.Series.idxmin, lambda x: f"{x:.0f} dias")
        worst_tm_vend, worst_tm_val = get_rank_data(df_performance_processed, 'Tempo Convers√£o (dias)', pd.Series.idxmax, lambda x: f"{x:.0f} dias")

        # Exibi√ß√£o melhorada com colunas e expander
        ranking_col1, ranking_col2 = st.columns(2)
        with ranking_col1:
            with st.expander("üèÜ Melhores Performances", expanded=True):
                st.markdown(f"**Taxa Convers√£o:** {best_tx_vend} ({best_tx_val})")
                st.markdown(f"**Receita Total:** {best_rec_vend} ({best_rec_val})")
                st.markdown(f"**Ticket M√©dio:** {best_tk_vend} ({best_tk_val})")
                st.markdown(f"**Tempo M√©dio Conv. (Mais R√°pido):** {best_tm_vend} ({best_tm_val})")
        with ranking_col2:
             with st.expander("‚ö†Ô∏è Pontos de Aten√ß√£o", expanded=True):
                st.markdown(f"**Taxa Convers√£o:** {worst_tx_vend} ({worst_tx_val})")
                st.markdown(f"**Receita Total:** {worst_rec_vend} ({worst_rec_val})")
                st.markdown(f"**Ticket M√©dio:** {worst_tk_vend} ({worst_tk_val})")
                st.markdown(f"**Tempo M√©dio Conv. (Mais Lento):** {worst_tm_vend} ({worst_tm_val})")

    except Exception as e:
        st.error(f"Ocorreu um erro ao exibir performance dos vendedores: {e}")
else:
    st.error("Arquivos kpis_gerais.csv ou performance_vendedores.csv n√£o carregados. P√°gina de Monetiza√ß√£o n√£o pode ser exibida.")
